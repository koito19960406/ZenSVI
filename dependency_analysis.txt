# Depth Estimation Dependency Analysis
Starting from: src/zensvi/cv/depth_estimation/depth_estimation.py

## Direct Imports from depth_estimation.py:
1. Local imports:
   - from .transforms import NormalizeImage, PrepareForNet, Resize
   - from .zoedepth.models.builder import build_model
   - from .zoedepth.utils.config import get_config

2. External imports:
   - concurrent.futures: ThreadPoolExecutor, as_completed
   - pathlib: Path
   - typing: List, Tuple, Union
   - cv2
   - gc
   - numpy
   - requests
   - torch
   - PIL: Image
   - torch.utils.data: DataLoader, Dataset
   - torchvision.transforms: Compose
   - tqdm
   - transformers: DPTForDepthEstimation, DPTImageProcessor

## Key Components:
1. Classes:
   - ImageDataset
   - DepthEstimator

2. Models Used:
   - DPT (Intel/dpt-large) for relative depth
   - ZoeDepth for absolute (metric) depth

## Dependencies Analysis:

1. ./transforms/
   Status: FOUND IN MODEL CODE
   - Required classes found in depth_anything.py:
     * Resize class (lines 71-196)
     * PrepForMidas class (similar to PrepareForNet, lines 197-242)
   - NormalizeImage can be replaced with torchvision.transforms.Normalize
   - Action: Move transform classes to dedicated transforms module

2. ./zoedepth/
   Structure found:
   a) models/
      Core files:
      - builder.py (model factory)
      - depth_model.py (base model interface)
      - model_io.py (model I/O operations)
      
      Base Models:
      - base_models/
        * depth_anything.py (core implementation with transforms)
        * midas.py (core implementation)
        * dpt_dinov2/ (DPT model implementation)
      
      Model Components:
      - layers/
        * attractor.py
        * dist_layers.py
        * localbins_layers.py
        * patch_transformer.py
      
      Model Variants:
      - zoedepth/ (used for absolute depth)
      - zoedepth_nk/ (appears unused)
   
   b) utils/
      - config.py (configuration handling)
      - arg_utils.py (argument parsing)
      - misc.py (utility functions)
      - geometry.py (geometric operations)
      - easydict/
   
   c) Other directories:
      - trainers/ (training-specific)
      - data/ (dataset handling)

## Required Files for Core Functionality:
1. depth_estimation.py (main interface)
2. transforms/ (to be created from depth_anything.py code)
3. zoedepth/
   Core Model Files:
   - models/builder.py
   - models/depth_model.py
   - models/model_io.py
   
   Model Implementations:
   - models/base_models/depth_anything.py
   - models/base_models/dpt_dinov2/*
   
   Model Components:
   - models/layers/attractor.py
   - models/layers/dist_layers.py
   - models/layers/localbins_layers.py
   - models/layers/patch_transformer.py
   
   Utilities:
   - utils/config.py
   - utils/arg_utils.py
   - utils/easydict/

   Model Variants:
   - models/zoedepth/ (required for absolute depth estimation)

## Safe to Remove:
1. Training-specific Components:
   - zoedepth/trainers/
   - zoedepth/data/
   - Most dataset configs in config.py except those used for inference

2. Unused Components:
   - models/zoedepth_nk/ (not used in production code)
   - models/base_models/midas.py (superseded by depth_anything.py)
   - zoedepth/utils/misc.py (no direct usage found)
   - zoedepth/utils/geometry.py (no direct usage found)

## Next Steps:
1. Create dedicated transforms module:
   - Extract Resize and PrepForMidas from depth_anything.py
   - Rename PrepForMidas to PrepareForNet
   - Use torchvision.transforms.Normalize for NormalizeImage

2. Clean up model structure:
   - Remove unused model variant (zoedepth_nk)
   - Remove unused midas.py implementation
   - Clean up config.py to remove unused dataset configurations

3. Remove training components:
   - Delete trainers directory
   - Delete data directory
   - Clean up unused utilities

## Notes:
- Transform classes are currently embedded in depth_anything.py
- Only the "zoedepth" variant is used in production code
- Training components can be safely removed
- Need to extract and reorganize transforms before other cleanup 